{"version":3,"sources":["script.js"],"names":["solution","gameOver","target_wordsUrl","fetchTargetWords","fetch","then","response","ok","Error","json","catch","error","console","getRandomWord","target_words","keys","Object","Math","floor","random","length","log","dictionary","dictionaryUrl","fetchDictionary","isWordInDictionary","word","includes","fetchedDictionary","lettersPattern","currentGuessCount","currentGuess","document","querySelector","currentLetters","dataset","letters","startInteraction","querySelectorAll","forEach","key","addEventListener","handleMouseClick","handleKeyPress","e","keyElement","target","classList","contains","keyPress","add","test","updateLetters","deleteFromLetters","guessWord","toLowerCase","localGuessCount","revealPromises","i","push","revealTile","checkLetter","matchedPositions","currentGuessForWin","Promise","all","winTiles","alert","completed","errorTiles","blur","concat","isWinAnimationRunning","flipTimeout","clearTimeout","id","replace","tiles","Array","from","_","index","intervalId","setInterval","tile","setTimeout","remove","clearInterval","errorMessage","letter","oldLetters","newLetters","updateTiles","tileNumber","textContent","slice","deletefromTiles","currentTile","innerText","correctlyGuessedLetters","fill","position","guessedWord","guessLetter","charAt","solutionLetter","gLetter","toUpperCase","status","resolve","selector","flipTile"],"mappings":"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","file":"script.js","sourcesContent":["//getting solution words from the json file\nlet gameOver = false;\nconst target_wordsUrl = 'target_words.json';\n\nfunction fetchTargetWords() {\n  return fetch(target_wordsUrl)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch(error => {\n      console.error('Error fetching target_words:', error);\n      return null;\n    });\n}\n\nfunction getRandomWord(target_words) {\n  const keys = Object.keys(target_words);\n  const randomKey = keys[Math.floor(Math.random() * keys.length)];\n  return target_words[randomKey];\n}\n\nlet solution;\n\n// Fetch the target_words and get a random word\nfetchTargetWords().then(target_words => {\n  if (target_words) {\n    solution = getRandomWord(target_words);\n    console.log(solution);\n  }\n});\n\n\n// getting dictionary file\nconst dictionaryUrl = 'dictionary.json';\n\n// Function to fetch the JSON data\nfunction fetchDictionary() {\n  return fetch(dictionaryUrl)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch(error => {\n      console.error('Error fetching target_words:', error);\n      return null;\n    });\n}\nlet dictionary;\nfetchDictionary().then(fetchedDictionary => {\n  if (fetchedDictionary) {\n    dictionary = fetchedDictionary;\n    console.log('Dictionary fetched successfully');\n  }\n});\n\nfunction isWordInDictionary(word, dictionary) {\n  return dictionary.includes(word);\n}\n\n\n//detect the keypress event\n\nconst lettersPattern = /^[a-zA-Z]$/;\nlet currentGuessCount=1;\nlet currentGuess=document.querySelector('#guess'+currentGuessCount);\nlet currentLetters = currentGuess.dataset.letters;\n\nfunction startInteraction(){\n  let keys = document.querySelectorAll('.key');\n  keys.forEach(key => {\n    key.addEventListener('click', handleMouseClick);\n  });\n  document.addEventListener('keydown',handleKeyPress);\n}\n\n\nfunction handleMouseClick(e){\n  console.log('click');\n  let keyElement = e.target;\n  if (keyElement.classList.contains('key')) {\n    let keyPress = keyElement.dataset.key;\n    keyElement.classList.add('marked');\n    if (gameOver) {\n      return;\n    }\n    //if key is a letter\n    if(keyPress.length==1 && lettersPattern.test(keyPress)){\n      updateLetters(keyPress);\n    }\n    //if key is backspace\n    else if(keyPress === 'Backspace'){\n      console.log('backspace');\n      deleteFromLetters();\n    }\n    //if key is enter\n    else if(keyPress === 'Enter' && currentGuess.dataset.letters.length==5 && currentGuessCount<=6){\n      let guessWord = currentGuess.dataset.letters;\n      //change the guess word to lower case\n      guessWord = guessWord.toLowerCase();\n      if (isWordInDictionary(guessWord, dictionary)) {\n        let localGuessCount = currentGuessCount;\n        let revealPromises = [];\n        for(let i=0; i<5; i++){\n          revealPromises.push(revealTile(i,checkLetter(i,localGuessCount)));\n        }\n        matchedPositions = [];\n        let currentGuessForWin = currentGuess; \n        Promise.all(revealPromises).then(() => {\n          if (guessWord === solution) {\n            winTiles(currentGuessForWin); \n            gameOver = true;\n            return; \n          }\n          else if (currentGuessCount > 6) {\n            alert('You lose! The correct word was ' + solution);\n            gameOver = true;\n            return; \n          }\n        });\n    \n        currentGuess.dataset.completed = 'true';\n        if (!gameOver) {\n          currentGuessCount++;\n          currentGuess = document.querySelector('#guess' + currentGuessCount);\n        }\n      }\n      else{\n        errorTiles(currentGuess);\n      }\n    }\n    keyElement.blur();\n  }\n}\n\nfunction handleKeyPress(e){ \n  let keyElement = document.querySelector(`.key[data-key=\"${e.key}\"]`);\n  if (keyElement) {\n    keyElement.classList.add('marked');\n  }\n  if (gameOver) {\n    return;\n  }\n  //if key is a letter\n  let keyPress = e.key;\n  if(keyPress.length==1 && lettersPattern.test(keyPress)){\n  updateLetters(keyPress);\n  }\n  //if key is backspace\n  else if(e.key==='Backspace'){\n    deleteFromLetters(e.key);\n}\n//if key is enter\nelse if(e.key==='Enter' && currentGuess.dataset.letters.length==5 &&currentGuessCount<=6){\n  let guessWord = currentGuess.dataset.letters;\n\n  if (isWordInDictionary(guessWord, dictionary)) {\n    console.log('enter');\n    let localGuessCount = currentGuessCount;\n    let revealPromises = [];\n    for(let i=0; i<5; i++){\n      revealPromises.push(revealTile(i,checkLetter(i,localGuessCount)));\n    }\n    matchedPositions = [];\n    let currentGuessForWin = currentGuess; \n    Promise.all(revealPromises).then(() => {\n      if (guessWord === solution) {\n        winTiles(currentGuessForWin); \n        gameOver = true;\n        return; \n      }\n      else if (currentGuessCount > 6) {\n        alert('You lose! The correct word was ' + solution);\n        gameOver = true;\n        return; \n      }\n    });\n\n    currentGuess.dataset.completed = 'true';\n    if (!gameOver) {\n      currentGuessCount++;\n      currentGuess = document.querySelector('#guess' + currentGuessCount);\n    }\n  }\n  else{\n    errorTiles(currentGuess);\n  }\n}\n};\n\n\nlet isWinAnimationRunning = false;\nlet flipTimeout = null;\n\nconst winTiles = (currentGuess) => {\n  clearTimeout(flipTimeout);\n  gameOver = true;\n  const currentGuessCount = currentGuess.id.replace('guess', '');\n  const tiles = Array.from({length: 5}, (_, i) => document.querySelector('#guess' + currentGuessCount + 'Tile' + (i + 1)));\n  \n  let index = 0;\n  const intervalId = setInterval(() => {\n    if (index < tiles.length) {\n      const tile = tiles[index];\n      if (tile) { // Check if the tile exists\n        tile.classList.add('win');\n        setTimeout(() => {\n          tile.classList.remove('win');\n        }, 2000); // Remove the 'win' class after 2 seconds\n      }\n      index++;\n    } else {\n      clearInterval(intervalId);\n      isWinAnimationRunning = false; // Set the flag to false after the win animation finishes\n    }\n  }, 100); // Delay increases by 100 milliseconds for each tile\n}\n\n\nconst errorTiles = (currentGuess) => {\n  const errorMessage = document.querySelector('.not_in_the_list');\n  if (errorMessage !== null) {\n    errorMessage.classList.remove('not_in_the_list');\n    errorMessage.classList.add('not_in_the_list--visible');\n\n    // Add the jiggle animation to the current guess\n    currentGuess.classList.add('jiggle');\n\n    setTimeout(() => {\n      errorMessage.classList.remove('not_in_the_list--visible');\n      errorMessage.classList.add('not_in_the_list');\n\n      // Remove the jiggle animation from the current guess\n      currentGuess.classList.remove('jiggle');\n    }, 2000);\n  }\n}\n//update \"letters\"\n\nconst updateLetters = (letter) => {\n  if (!currentGuess.dataset.completed) {\n    let oldLetters = currentGuess.dataset.letters;\n    if (oldLetters.length < 5) {\n      let newLetters = oldLetters + letter;\n      currentGuess.dataset.letters = newLetters;\n      updateTiles(oldLetters.length+1, letter);\n    }\n  }\n};\n\n//update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  let tile = document.querySelector(\"#guess\" + currentGuessCount + \"Tile\" + tileNumber);\n  if (tile) {\n    tile.textContent = letter;\n  }\n};\n\n  //backspace---delete last letter\n  const deleteFromLetters = () => {\n    if (!currentGuess.dataset.completed && !gameOver) {\n      let oldLetters = currentGuess.dataset.letters;\n      if (oldLetters.length > 0) {\n        let newLetters = oldLetters.slice(0, -1);\n        deletefromTiles(oldLetters.length);\n        currentGuess.dataset.letters = newLetters;\n      }\n    }\n  };\n  //if backspace delete tile markup\n  const deletefromTiles=(tileNumber)=>{\n    console.log(\"tileNumber: \" + tileNumber);\n    if (!currentGuess.dataset.completed) {\n      let tile = document.querySelector(\"#guess\" + currentGuessCount + \"Tile\" + tileNumber);\n      tile.textContent = '';\n    }\n    let currentTile= document.querySelector(\"#guess\" + currentGuessCount + \"Tile\" + tileNumber);\n     currentTile.dataset.letter='';\n    currentTile.innerText='';\n  }\n\n  //submit and check word from the dictionary\n  let matchedPositions = [];\n  let correctlyGuessedLetters = new Array(5).fill(null);\n\n  const checkLetter = (position, currentGuessCount) => {\n    let guessedWord = currentGuess.dataset.letters;\n    let guessLetter = guessedWord.charAt(position);\n    let solutionLetter = solution.charAt(position);\n    let gLetter = guessedWord.charAt(position);\n      gLetter = guessLetter.toUpperCase();\n    let keyElement = document.querySelector(`.key[data-key=\"${gLetter}\"]`);\n    if (guessLetter === solutionLetter) {\n      correctlyGuessedLetters[position] = guessLetter;\n      setTimeout(() => {\n        revealTile(position, 'correct', currentGuessCount);\n        if (keyElement.classList.contains('present')) {\n          keyElement.classList.remove('present');\n          keyElement.classList.add('correct');\n        }\n        else{\n          keyElement.classList.add('correct');\n        }\n        currentGuessCount++;\n      }, position * 150);\n    } else if (\n      solution.includes(guessLetter) &&\n      correctlyGuessedLetters[position] !== guessLetter &&\n      guessedWord.charAt(position) !== solution.charAt(position)\n    ) {\n      setTimeout(() => {\n        revealTile(position, 'present', currentGuessCount);\n        keyElement.classList.add('present');\n        currentGuessCount++;\n      }, position * 150);\n    } else {\n      setTimeout(() => {\n        revealTile(position, 'absent', currentGuessCount);\n        keyElement.classList.add('absent');\n        currentGuessCount++;\n      }, position * 150);\n    }\n    \n  };\n//reveal the word\nconst revealTile = (i, status, currentGuessCount) => {\n  return new Promise(resolve => {\n    let tileNumber = i + 1;\n    let selector = \"#guess\" + currentGuessCount + \"Tile\" + tileNumber;\n    let tile = document.querySelector(selector);\n    if(!gameOver) {\n      flipTile(tileNumber, status, currentGuessCount);\n    }\n    // Resolve the promise after a delay\n    setTimeout(resolve, 1500); // Adjust this delay as needed\n  });\n};\n\nconst flipTile = (tileNumber, status, currentGuessCount) => {\n  let selector = \"#guess\" + currentGuessCount + \"Tile\" + tileNumber;\n  let tile = document.querySelector(selector);\n\n  if (!tile || isWinAnimationRunning) { // Check if the win animation is running\n    return;\n  }\n\n  tile.classList.add('flip-in');\n\n  flipTimeout=setTimeout(() => {\n    if (isWinAnimationRunning) { // Check if the win animation is running\n      return;\n    }\n    tile.classList.remove('flip-in');\n    tile.classList.add('flip-out');\n    tile.classList.add(status); \n\n    // Get the letter from the tile\n    let letter = tile.textContent.toLowerCase();\n\n    // Find the corresponding key element\n    let keyElement = document.querySelector(`.key[data-key=\"${letter}\"]`);\n\n    // Add the status class to the key element\n    if (keyElement) {\n      keyElement.classList.add(status);\n    }\n\n    // Add the color after the flip animation is complete\n    switch (status) {\n      case 'correct': tile.classList.add('correct'); break;\n      \n      case 'present': tile.classList.add('present'); break;\n  \n      case 'absent': tile.classList.add('absent'); break;\n    }\n  }, 500);\n}\n\n\nstartInteraction();"]}